#!/bin/bash

abort()
{
    if [ $? -ne 0 ]; then
      echo "-----> Build failed"
      exit 1
    fi
}

trap 'abort' 0

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(dirname $0)/../

ERLROOT=$(mktemp -d)

PATH=$ERLROOT/bin:${CACHE_DIR}/bin:$PATH
export PATH

DEFAULT_OTP_VERSION="17.1"
if [ ! -f ${BUILD_DIR}/.preferred_otp_version ] ; then
  echo $DEFAULT_OTP_VERSION > ${BUILD_DIR}/.preferred_otp_version
fi

DESIRED_OTP_VERSION=$(cat ${BUILD_DIR}/.preferred_otp_version)
OTP_VERSION=${DESIRED_OTP_VERSION:=${DEFAULT_OTP_VERSION}}

if [ ! -d ${CACHE_DIR}/bin/ ] ; then
  mkdir -p ${CACHE_DIR}/bin
fi
if [ ! -d ${CACHE_DIR}/kerl/ ] ; then
  mkdir -p ${CACHE_DIR}/kerl
fi

if [ ! -e ${CACHE_DIR}/bin/wget ] ; then
  echo "-----> wget not installed"
  WORK_DIR=$(pwd)
  WGET_BUILD_DIR=$(mktemp -d)
  cd  $WGET_BUILD_DIR
  echo "-------> downloading wget"
  curl --silent http://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz | tar -xzf - --strip-components=1
  echo "-------> configuring wget"
  ./configure --with-ssl=openssl >/dev/null |& sed -u 's/^/       /'
  echo "-------> building wget"
  make >/dev/null |& sed -u 's/^/       /'
  echo "-------> installing wget"
  mv ./src/wget ${CACHE_DIR}/bin/wget
  cd $WORK_DIR
fi

if [ ! -e ${CACHE_DIR}/bin/kerl ] ; then
  echo "-----> installing kerl from https://githubusercontent.com/spawngrid/kerl"
  curl -s -o ${CACHE_DIR}/bin/kerl https://raw.githubusercontent.com/spawngrid/kerl/master/kerl |& sed -u 's/^/       /'
  chmod +x ${CACHE_DIR}/bin/kerl
fi
ln -s ${CACHE_DIR}/kerl $HOME/.kerl

echo "-----> Installing Erlang/OTP ${OTP_VERSION}"
kerl install ${OTP_VERSION} ${ERLROOT} |& sed -u 's/^/       /'
if [ ${PIPESTATUS[0]} -ne 0 ]; then
  echo "-------> Erlang/OTP ${OTP_VERSION} not cached, building"
  MAKEFLAGS=-j2 kerl build ${OTP_VERSION} ${OTP_VERSION} |& sed -u 's/^/       /'
  kerl install ${OTP_VERSION} ${ERLROOT} |& sed -u 's/^/       /'
  # work around https://github.com/erlware/relx/issues/211
  rm ${ERLROOT}/releases/*/start_all_example.rel
fi

echo "-----> Building with erlang.mk"
make |& sed -u 's/^/       /'
echo

if [ ! -f ./Procfile ]; then
  APP=$(ls ./_rel/)
  echo "-----> No Procfile, using web: ./_rel/$APP/bin/$APP"
  echo "web: ./_rel/$APP/bin/$APP foreground" > Procfile
fi

echo "-----> Build succeeded"
